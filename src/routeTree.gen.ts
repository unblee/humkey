/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const ScaleFinderLazyImport = createFileRoute('/scale-finder')()
const DiatonicChordsLazyImport = createFileRoute('/diatonic-chords')()

// Create/Update Routes

const ScaleFinderLazyRoute = ScaleFinderLazyImport.update({
  path: '/scale-finder',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/scale-finder.lazy').then((d) => d.Route))

const DiatonicChordsLazyRoute = DiatonicChordsLazyImport.update({
  path: '/diatonic-chords',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/diatonic-chords.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/diatonic-chords': {
      id: '/diatonic-chords'
      path: '/diatonic-chords'
      fullPath: '/diatonic-chords'
      preLoaderRoute: typeof DiatonicChordsLazyImport
      parentRoute: typeof rootRoute
    }
    '/scale-finder': {
      id: '/scale-finder'
      path: '/scale-finder'
      fullPath: '/scale-finder'
      preLoaderRoute: typeof ScaleFinderLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/diatonic-chords': typeof DiatonicChordsLazyRoute
  '/scale-finder': typeof ScaleFinderLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/diatonic-chords': typeof DiatonicChordsLazyRoute
  '/scale-finder': typeof ScaleFinderLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/diatonic-chords': typeof DiatonicChordsLazyRoute
  '/scale-finder': typeof ScaleFinderLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/diatonic-chords' | '/scale-finder'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/diatonic-chords' | '/scale-finder'
  id: '__root__' | '/' | '/diatonic-chords' | '/scale-finder'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiatonicChordsLazyRoute: typeof DiatonicChordsLazyRoute
  ScaleFinderLazyRoute: typeof ScaleFinderLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiatonicChordsLazyRoute: DiatonicChordsLazyRoute,
  ScaleFinderLazyRoute: ScaleFinderLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/diatonic-chords",
        "/scale-finder"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/diatonic-chords": {
      "filePath": "diatonic-chords.lazy.tsx"
    },
    "/scale-finder": {
      "filePath": "scale-finder.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
